// <auto-generated />
using System;
using ArtworkSharingPlatform.Domain.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtworkSharingPlatform.Domain.Migrations
{
    [DbContext(typeof(ArtworkSharingPlatformDbContext))]
    [Migration("20240302063801_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,5)");

                    b.Property<int>("ReleaseCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.ArtworkImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtworkId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsThumbnail")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("ArtworkImages");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtworkId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtworkId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtworkId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Configs.ConfigManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConfigDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdvertisementConfig")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGeneralConfig")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPagingConfig")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhysicalImageConfig")
                        .HasColumnType("bit");

                    b.Property<bool>("IsServicePackageConfig")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxReleaseCount")
                        .HasColumnType("int");

                    b.Property<string>("MyPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RowSize")
                        .HasColumnType("int");

                    b.Property<int>("TotalItemPerPage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.ToTable("ConfigManagers");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Orders.PreOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtworkId")
                        .HasColumnType("int");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EstimateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,5)");

                    b.HasKey("Id");

                    b.HasIndex("ArtworkId")
                        .IsUnique();

                    b.HasIndex("BuyerId");

                    b.ToTable("PreOrders");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Packages.PackageBilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,5)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("PackageBilling");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Packages.PackageInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Credit")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,5)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PackageInformation");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Transactions.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("ReportName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemainingCredit")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConfigManagerPackageInformation", b =>
                {
                    b.Property<int>("ConfigManagersId")
                        .HasColumnType("int");

                    b.Property<int>("PackageConfigsId")
                        .HasColumnType("int");

                    b.HasKey("ConfigManagersId", "PackageConfigsId");

                    b.HasIndex("PackageConfigsId");

                    b.ToTable("ConfigManagerPackageInformation");
                });

            modelBuilder.Entity("PackageBillingPackageInformation", b =>
                {
                    b.Property<int>("PackageBillingsId")
                        .HasColumnType("int");

                    b.Property<int>("PackageInformationId")
                        .HasColumnType("int");

                    b.HasKey("PackageBillingsId", "PackageInformationId");

                    b.HasIndex("PackageInformationId");

                    b.ToTable("PackageBillingPackageInformation");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Artwork", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.User", "Owner")
                        .WithMany("Artworks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.ArtworkImage", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Artworks.Artwork", "Artwork")
                        .WithMany("ArtworkImages")
                        .HasForeignKey("ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Comment", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Artworks.Artwork", "Artwork")
                        .WithMany("Comments")
                        .HasForeignKey("ArtworkId");

                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");

                    b.Navigation("Artwork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Like", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Artworks.Artwork", "Artwork")
                        .WithMany("Likes")
                        .HasForeignKey("ArtworkId");

                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId");

                    b.Navigation("Artwork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Rating", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Artworks.Artwork", "Artwork")
                        .WithMany("Ratings")
                        .HasForeignKey("ArtworkId");

                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.User", null)
                        .WithMany("Ratings")
                        .HasForeignKey("UserId");

                    b.Navigation("Artwork");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Configs.ConfigManager", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.User", "Administrator")
                        .WithMany("ConfigManagers")
                        .HasForeignKey("AdministratorId");

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Orders.PreOrder", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Artworks.Artwork", "Artwork")
                        .WithOne("PreOrder")
                        .HasForeignKey("ArtworkSharingPlatform.Domain.Entities.Orders.PreOrder", "ArtworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.User", "Buyer")
                        .WithMany("PreOrders")
                        .HasForeignKey("BuyerId");

                    b.Navigation("Artwork");

                    b.Navigation("Buyer");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Packages.PackageBilling", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Transactions.Transaction", null)
                        .WithMany("PackageBillings")
                        .HasForeignKey("TransactionId");

                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.User", "User")
                        .WithMany("PackageBillings")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Transactions.Transaction", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.User", "Manager")
                        .WithMany("Transactions")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Users.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ConfigManagerPackageInformation", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Configs.ConfigManager", null)
                        .WithMany()
                        .HasForeignKey("ConfigManagersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Packages.PackageInformation", null)
                        .WithMany()
                        .HasForeignKey("PackageConfigsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PackageBillingPackageInformation", b =>
                {
                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Packages.PackageBilling", null)
                        .WithMany()
                        .HasForeignKey("PackageBillingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtworkSharingPlatform.Domain.Entities.Packages.PackageInformation", null)
                        .WithMany()
                        .HasForeignKey("PackageInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Artworks.Artwork", b =>
                {
                    b.Navigation("ArtworkImages");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PreOrder");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Transactions.Transaction", b =>
                {
                    b.Navigation("PackageBillings");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Users.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ArtworkSharingPlatform.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Artworks");

                    b.Navigation("Comments");

                    b.Navigation("ConfigManagers");

                    b.Navigation("Likes");

                    b.Navigation("PackageBillings");

                    b.Navigation("PreOrders");

                    b.Navigation("Ratings");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
